
bin\Debug\tof.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000974  00000a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000974  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800220  00800220  00000a48  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000f8  00000000  00000000  00000aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000106c  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000dbb  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0000085d  00000000  00000000  000029bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000234  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000060c  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000142  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_29>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_35>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e4 e7       	ldi	r30, 0x74	; 116

000000fc <.Loc.4>:
  fc:	f9 e0       	ldi	r31, 0x09	; 9

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a0 e2       	ldi	r26, 0x20	; 32

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a4 32       	cpi	r26, 0x24	; 36

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <main>
 122:	0c 94 b8 04 	jmp	0x970	; 0x970 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_display>:
	~0x66, ~0xB6, ~0xBE, ~0xE0,
	~0xFE, ~0xF6, ~0xEE, ~0x3E,
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init_display (void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62

00000132 <.Loc.1>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	fc 01       	movw	r30, r24
 138:	20 81       	ld	r18, Z
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	91 e0       	ldi	r25, 0x01	; 1

0000013e <.Loc.2>:
 13e:	20 62       	ori	r18, 0x20	; 32
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18

00000144 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	fc 01       	movw	r30, r24
 14a:	20 81       	ld	r18, Z
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	91 e0       	ldi	r25, 0x01	; 1

00000150 <.Loc.4>:
 150:	20 61       	ori	r18, 0x10	; 16
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18

00000156 <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 156:	83 e3       	ldi	r24, 0x33	; 51
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	20 81       	ld	r18, Z
 15e:	83 e3       	ldi	r24, 0x33	; 51
 160:	90 e0       	ldi	r25, 0x00	; 0

00000162 <.Loc.6>:
 162:	20 62       	ori	r18, 0x20	; 32
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18

00000168 <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	fc 01       	movw	r30, r24
 16e:	20 81       	ld	r18, Z

00000170 <.Loc.8>:
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	91 e0       	ldi	r25, 0x01	; 1

00000174 <.Loc.9>:
 174:	2f 7e       	andi	r18, 0xEF	; 239
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18

0000017a <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 17a:	84 e3       	ldi	r24, 0x34	; 52
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	20 81       	ld	r18, Z

00000182 <.Loc.11>:
 182:	84 e3       	ldi	r24, 0x34	; 52
 184:	90 e0       	ldi	r25, 0x00	; 0

00000186 <.Loc.12>:
 186:	2f 7d       	andi	r18, 0xDF	; 223
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18

0000018c <.Loc.13>:
}
 18c:	00 00       	nop
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <send_data>:

void send_data(char data)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	00 d0       	rcall	.+0      	; 0x19a <L0^A>

0000019a <L0^A>:
 19a:	0f 92       	push	r0
 19c:	0f 92       	push	r0
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	8d 83       	std	Y+5, r24	; 0x05

000001a4 <.LBB14>:
	for (unsigned i = 0; i < 8; i++)
 1a4:	1a 82       	std	Y+2, r1	; 0x02
 1a6:	19 82       	std	Y+1, r1	; 0x01

000001a8 <.Loc.16>:
 1a8:	39 c0       	rjmp	.+114    	; 0x21c <.L3>

000001aa <.L6>:
	// Herhaal voor alle bits in een char
	{
		// Bepaal de waarde van de bit die je naar het schuifregister
		// wil sturen
		int bit = data & 1;
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	08 2e       	mov	r0, r24
 1ae:	00 0c       	add	r0, r0
 1b0:	99 0b       	sbc	r25, r25

000001b2 <.Loc.18>:
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	99 27       	eor	r25, r25
 1b6:	9c 83       	std	Y+4, r25	; 0x04
 1b8:	8b 83       	std	Y+3, r24	; 0x03

000001ba <.Loc.19>:
		data >>= 1;
 1ba:	8d 81       	ldd	r24, Y+5	; 0x05
 1bc:	85 95       	asr	r24
 1be:	8d 83       	std	Y+5, r24	; 0x05

000001c0 <.Loc.20>:

		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		if (bit)
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	9c 81       	ldd	r25, Y+4	; 0x04
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	51 f0       	breq	.+20     	; 0x1dc <.L4>

000001c8 <.Loc.21>:
		{
			PORT_SDI |= (1 << SDI_BIT);
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 81       	ld	r18, Z
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	91 e0       	ldi	r25, 0x01	; 1

000001d4 <.Loc.22>:
 1d4:	20 62       	ori	r18, 0x20	; 32
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <.L5>

000001dc <.L4>:
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 81       	ld	r18, Z

000001e4 <.Loc.24>:
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	91 e0       	ldi	r25, 0x01	; 1

000001e8 <.Loc.25>:
 1e8:	2f 7d       	andi	r18, 0xDF	; 223
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18

000001ee <.L5>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 81       	ld	r18, Z
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	91 e0       	ldi	r25, 0x01	; 1

000001fa <.Loc.27>:
 1fa:	20 61       	ori	r18, 0x10	; 16
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18

00000200 <.Loc.28>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	fc 01       	movw	r30, r24
 206:	20 81       	ld	r18, Z

00000208 <.Loc.29>:
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	91 e0       	ldi	r25, 0x01	; 1

0000020c <.Loc.30>:
 20c:	2f 7e       	andi	r18, 0xEF	; 239
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18

00000212 <.LBE15>:
	for (unsigned i = 0; i < 8; i++)
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	9a 81       	ldd	r25, Y+2	; 0x02
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	9a 83       	std	Y+2, r25	; 0x02
 21a:	89 83       	std	Y+1, r24	; 0x01

0000021c <.L3>:
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
 220:	87 30       	cpi	r24, 0x07	; 7
 222:	91 05       	cpc	r25, r1
 224:	11 f2       	breq	.-124    	; 0x1aa <.L6>
 226:	08 f2       	brcs	.-126    	; 0x1aa <.L6>

00000228 <.LBE14>:
	}
}
 228:	00 00       	nop
 22a:	00 00       	nop
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <send_enable>:

void send_enable(int display_nummer)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	0f 92       	push	r0
 242:	0f 92       	push	r0
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	9a 83       	std	Y+2, r25	; 0x02
 24a:	89 83       	std	Y+1, r24	; 0x01

0000024c <.Loc.35>:
	send_data(0x10 << display_nummer);
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	09 80       	ldd	r0, Y+1	; 0x01
 252:	02 c0       	rjmp	.+4      	; 0x258 <.L2^B1>

00000254 <.L1^B1>:
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25

00000258 <.L2^B1>:
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <.L1^B1>

0000025c <.Loc.36>:
 25c:	0e 94 ca 00 	call	0x194	; 0x194 <send_data>

00000260 <.Loc.37>:
}
 260:	00 00       	nop
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <display>:

void display(char data, int display_nummer)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <L0^A>

00000272 <L0^A>:
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	7b 83       	std	Y+3, r23	; 0x03
 27a:	6a 83       	std	Y+2, r22	; 0x02

0000027c <.Loc.39>:
	send_data(data);
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	0e 94 ca 00 	call	0x194	; 0x194 <send_data>

00000282 <.Loc.40>:
	send_enable(display_nummer);
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	9b 81       	ldd	r25, Y+3	; 0x03
 286:	0e 94 1e 01 	call	0x23c	; 0x23c <send_enable>

0000028a <.Loc.41>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
 28a:	84 e3       	ldi	r24, 0x34	; 52
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	20 81       	ld	r18, Z
 292:	84 e3       	ldi	r24, 0x34	; 52
 294:	90 e0       	ldi	r25, 0x00	; 0

00000296 <.Loc.42>:
 296:	20 62       	ori	r18, 0x20	; 32
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18

0000029c <.Loc.43>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 29c:	84 e3       	ldi	r24, 0x34	; 52
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 81       	ld	r18, Z

000002a4 <.Loc.44>:
 2a4:	84 e3       	ldi	r24, 0x34	; 52
 2a6:	90 e0       	ldi	r25, 0x00	; 0

000002a8 <.Loc.45>:
 2a8:	2f 7d       	andi	r18, 0xDF	; 223
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18

000002ae <.Loc.46>:
}
 2ae:	00 00       	nop
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <display_getal>:

void display_getal(unsigned int getal)
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	ac 97       	sbiw	r28, 0x2c	; 44
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	98 8f       	std	Y+24, r25	; 0x18
 2d2:	8f 8b       	std	Y+23, r24	; 0x17

000002d4 <.Loc.48>:
	int deler = 1000;
 2d4:	88 ee       	ldi	r24, 0xE8	; 232
 2d6:	93 e0       	ldi	r25, 0x03	; 3
 2d8:	9a 83       	std	Y+2, r25	; 0x02
 2da:	89 83       	std	Y+1, r24	; 0x01

000002dc <.Loc.49>:
	int niet_0_gezien = 0;
 2dc:	1c 82       	std	Y+4, r1	; 0x04
 2de:	1b 82       	std	Y+3, r1	; 0x03

000002e0 <.LBB16>:
	for (int i = 3; i >= 0; i--)
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9e 83       	std	Y+6, r25	; 0x06
 2e6:	8d 83       	std	Y+5, r24	; 0x05

000002e8 <.Loc.51>:
 2e8:	e3 c0       	rjmp	.+454    	; 0x4b0 <.L10>

000002ea <.L21>:
	{
		int cijfer = (getal/deler)%10;
 2ea:	29 81       	ldd	r18, Y+1	; 0x01
 2ec:	3a 81       	ldd	r19, Y+2	; 0x02
 2ee:	8f 89       	ldd	r24, Y+23	; 0x17
 2f0:	98 8d       	ldd	r25, Y+24	; 0x18
 2f2:	b9 01       	movw	r22, r18
 2f4:	0e 94 66 03 	call	0x6cc	; 0x6cc <__udivmodhi4>
 2f8:	cb 01       	movw	r24, r22
 2fa:	ac 01       	movw	r20, r24

000002fc <.Loc.53>:
 2fc:	9a 01       	movw	r18, r20
 2fe:	ad ec       	ldi	r26, 0xCD	; 205
 300:	bc ec       	ldi	r27, 0xCC	; 204
 302:	0e 94 8e 03 	call	0x71c	; 0x71c <__umulhisi3>
 306:	9c 01       	movw	r18, r24
 308:	36 95       	lsr	r19
 30a:	27 95       	ror	r18
 30c:	36 95       	lsr	r19
 30e:	27 95       	ror	r18
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	c9 01       	movw	r24, r18
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	82 0f       	add	r24, r18
 320:	93 1f       	adc	r25, r19
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	9a 01       	movw	r18, r20
 328:	28 1b       	sub	r18, r24
 32a:	39 0b       	sbc	r19, r25

0000032c <.Loc.54>:
 32c:	38 87       	std	Y+8, r19	; 0x08
 32e:	2f 83       	std	Y+7, r18	; 0x07

00000330 <.Loc.55>:
		if (cijfer || niet_0_gezien || deler == 1)
 330:	8f 81       	ldd	r24, Y+7	; 0x07
 332:	98 85       	ldd	r25, Y+8	; 0x08
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	51 f4       	brne	.+20     	; 0x34c <.L11>

00000338 <.Loc.56>:
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	9c 81       	ldd	r25, Y+4	; 0x04
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	31 f4       	brne	.+12     	; 0x34c <.L11>

00000340 <.Loc.57>:
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	9a 81       	ldd	r25, Y+2	; 0x02
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	91 05       	cpc	r25, r1
 348:	09 f0       	breq	.+2      	; 0x34c <.L11>

0000034a <L0^A>:
 34a:	a3 c0       	rjmp	.+326    	; 0x492 <.L12>

0000034c <.L11>:
		{
			display(segmentcodes[cijfer], i);
 34c:	8f 81       	ldd	r24, Y+7	; 0x07
 34e:	98 85       	ldd	r25, Y+8	; 0x08
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	80 50       	subi	r24, 0x00	; 0
 356:	9e 4f       	sbci	r25, 0xFE	; 254
 358:	dc 01       	movw	r26, r24
 35a:	8d 91       	ld	r24, X+
 35c:	9c 91       	ld	r25, X

0000035e <.Loc.59>:
 35e:	28 2f       	mov	r18, r24
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	9e 81       	ldd	r25, Y+6	; 0x06
 364:	bc 01       	movw	r22, r24
 366:	82 2f       	mov	r24, r18
 368:	0e 94 36 01 	call	0x26c	; 0x26c <display>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	a0 e8       	ldi	r26, 0x80	; 128
 372:	bf e3       	ldi	r27, 0x3F	; 63
 374:	89 87       	std	Y+9, r24	; 0x09
 376:	9a 87       	std	Y+10, r25	; 0x0a
 378:	ab 87       	std	Y+11, r26	; 0x0b
 37a:	bc 87       	std	Y+12, r27	; 0x0c

0000037c <.LBB18>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	4a e7       	ldi	r20, 0x7A	; 122
 382:	55 e4       	ldi	r21, 0x45	; 69
 384:	69 85       	ldd	r22, Y+9	; 0x09
 386:	7a 85       	ldd	r23, Y+10	; 0x0a
 388:	8b 85       	ldd	r24, Y+11	; 0x0b
 38a:	9c 85       	ldd	r25, Y+12	; 0x0c
 38c:	0e 94 23 04 	call	0x846	; 0x846 <__mulsf3>
 390:	6d 8f       	std	Y+29, r22	; 0x1d
 392:	7e 8f       	std	Y+30, r23	; 0x1e
 394:	8f 8f       	std	Y+31, r24	; 0x1f
 396:	98 a3       	std	Y+32, r25	; 0x20
 398:	8d 8d       	ldd	r24, Y+29	; 0x1d
 39a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 39c:	af 8d       	ldd	r26, Y+31	; 0x1f
 39e:	b8 a1       	ldd	r27, Y+32	; 0x20
 3a0:	8d 87       	std	Y+13, r24	; 0x0d
 3a2:	9e 87       	std	Y+14, r25	; 0x0e
 3a4:	af 87       	std	Y+15, r26	; 0x0f
 3a6:	b8 8b       	std	Y+16, r27	; 0x10

000003a8 <.Loc.61>:
	if (__tmp < 1.0)
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	40 e8       	ldi	r20, 0x80	; 128
 3ae:	5f e3       	ldi	r21, 0x3F	; 63
 3b0:	6d 85       	ldd	r22, Y+13	; 0x0d
 3b2:	7e 85       	ldd	r23, Y+14	; 0x0e
 3b4:	8f 85       	ldd	r24, Y+15	; 0x0f
 3b6:	98 89       	ldd	r25, Y+16	; 0x10
 3b8:	0e 94 9d 03 	call	0x73a	; 0x73a <__cmpsf2>
 3bc:	88 23       	and	r24, r24
 3be:	2c f4       	brge	.+10     	; 0x3ca <.L24>

000003c0 <.Loc.62>:
		__ticks = 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9a 8b       	std	Y+18, r25	; 0x12
 3c6:	89 8b       	std	Y+17, r24	; 0x11
 3c8:	55 c0       	rjmp	.+170    	; 0x474 <.L15>

000003ca <.L24>:
	else if (__tmp > 65535)
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	3f ef       	ldi	r19, 0xFF	; 255
 3ce:	4f e7       	ldi	r20, 0x7F	; 127
 3d0:	57 e4       	ldi	r21, 0x47	; 71
 3d2:	6d 85       	ldd	r22, Y+13	; 0x0d
 3d4:	7e 85       	ldd	r23, Y+14	; 0x0e
 3d6:	8f 85       	ldd	r24, Y+15	; 0x0f
 3d8:	98 89       	ldd	r25, Y+16	; 0x10
 3da:	0e 94 1e 04 	call	0x83c	; 0x83c <__gesf2>
 3de:	88 23       	and	r24, r24
 3e0:	d9 f1       	breq	.+118    	; 0x458 <.L25>
 3e2:	d4 f1       	brlt	.+116    	; 0x458 <.L25>

000003e4 <.Loc.64>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	40 e2       	ldi	r20, 0x20	; 32
 3ea:	51 e4       	ldi	r21, 0x41	; 65
 3ec:	69 85       	ldd	r22, Y+9	; 0x09
 3ee:	7a 85       	ldd	r23, Y+10	; 0x0a
 3f0:	8b 85       	ldd	r24, Y+11	; 0x0b
 3f2:	9c 85       	ldd	r25, Y+12	; 0x0c
 3f4:	0e 94 23 04 	call	0x846	; 0x846 <__mulsf3>
 3f8:	69 a3       	std	Y+33, r22	; 0x21
 3fa:	7a a3       	std	Y+34, r23	; 0x22
 3fc:	8b a3       	std	Y+35, r24	; 0x23
 3fe:	9c a3       	std	Y+36, r25	; 0x24
 400:	89 a1       	ldd	r24, Y+33	; 0x21
 402:	9a a1       	ldd	r25, Y+34	; 0x22
 404:	ab a1       	ldd	r26, Y+35	; 0x23
 406:	bc a1       	ldd	r27, Y+36	; 0x24
 408:	89 8f       	std	Y+25, r24	; 0x19
 40a:	9a 8f       	std	Y+26, r25	; 0x1a
 40c:	ab 8f       	std	Y+27, r26	; 0x1b
 40e:	bc 8f       	std	Y+28, r27	; 0x1c

00000410 <.Loc.65>:
 410:	69 8d       	ldd	r22, Y+25	; 0x19
 412:	7a 8d       	ldd	r23, Y+26	; 0x1a
 414:	8b 8d       	ldd	r24, Y+27	; 0x1b
 416:	9c 8d       	ldd	r25, Y+28	; 0x1c
 418:	0e 94 a2 03 	call	0x744	; 0x744 <__fixunssfsi>
 41c:	6d a3       	std	Y+37, r22	; 0x25
 41e:	7e a3       	std	Y+38, r23	; 0x26
 420:	8f a3       	std	Y+39, r24	; 0x27
 422:	98 a7       	std	Y+40, r25	; 0x28
 424:	ad a1       	ldd	r26, Y+37	; 0x25
 426:	be a1       	ldd	r27, Y+38	; 0x26
 428:	ba 8b       	std	Y+18, r27	; 0x12
 42a:	a9 8b       	std	Y+17, r26	; 0x11

0000042c <.Loc.66>:
		while(__ticks)
 42c:	10 c0       	rjmp	.+32     	; 0x44e <.L18>

0000042e <.L19>:
 42e:	80 e9       	ldi	r24, 0x90	; 144
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	9c 8b       	std	Y+20, r25	; 0x14
 434:	8b 8b       	std	Y+19, r24	; 0x13

00000436 <.LBB20>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 436:	8b 89       	ldd	r24, Y+19	; 0x13
 438:	9c 89       	ldd	r25, Y+20	; 0x14

0000043a <.L1^B2>:
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <.L1^B2>
 43e:	9c 8b       	std	Y+20, r25	; 0x14
 440:	8b 8b       	std	Y+19, r24	; 0x13

00000442 <.Loc.68>:
	...

00000444 <.LBE20>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 444:	89 89       	ldd	r24, Y+17	; 0x11
 446:	9a 89       	ldd	r25, Y+18	; 0x12
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	9a 8b       	std	Y+18, r25	; 0x12
 44c:	89 8b       	std	Y+17, r24	; 0x11

0000044e <.L18>:
		while(__ticks)
 44e:	89 89       	ldd	r24, Y+17	; 0x11
 450:	9a 89       	ldd	r25, Y+18	; 0x12
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	61 f7       	brne	.-40     	; 0x42e <.L19>

00000456 <.Loc.71>:
		}
		return;
 456:	19 c0       	rjmp	.+50     	; 0x48a <.L20>

00000458 <.L25>:
	}
	else
		__ticks = (uint16_t)__tmp;
 458:	6d 85       	ldd	r22, Y+13	; 0x0d
 45a:	7e 85       	ldd	r23, Y+14	; 0x0e
 45c:	8f 85       	ldd	r24, Y+15	; 0x0f
 45e:	98 89       	ldd	r25, Y+16	; 0x10
 460:	0e 94 a2 03 	call	0x744	; 0x744 <__fixunssfsi>
 464:	69 a7       	std	Y+41, r22	; 0x29
 466:	7a a7       	std	Y+42, r23	; 0x2a
 468:	8b a7       	std	Y+43, r24	; 0x2b
 46a:	9c a7       	std	Y+44, r25	; 0x2c
 46c:	e9 a5       	ldd	r30, Y+41	; 0x29
 46e:	fa a5       	ldd	r31, Y+42	; 0x2a
 470:	fa 8b       	std	Y+18, r31	; 0x12
 472:	e9 8b       	std	Y+17, r30	; 0x11

00000474 <.L15>:
 474:	89 89       	ldd	r24, Y+17	; 0x11
 476:	9a 89       	ldd	r25, Y+18	; 0x12
 478:	9e 8b       	std	Y+22, r25	; 0x16
 47a:	8d 8b       	std	Y+21, r24	; 0x15

0000047c <.LBB22>:
 47c:	8d 89       	ldd	r24, Y+21	; 0x15
 47e:	9e 89       	ldd	r25, Y+22	; 0x16

00000480 <.L1^B3>:
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <.L1^B3>
 484:	9e 8b       	std	Y+22, r25	; 0x16
 486:	8d 8b       	std	Y+21, r24	; 0x15

00000488 <.Loc.74>:
	...

0000048a <.L20>:
			_delay_ms(1);   // 1 kHz
			niet_0_gezien = 1;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	9c 83       	std	Y+4, r25	; 0x04
 490:	8b 83       	std	Y+3, r24	; 0x03

00000492 <.L12>:
		}
		deler /= 10;
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	9a 81       	ldd	r25, Y+2	; 0x02
 496:	2a e0       	ldi	r18, 0x0A	; 10
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__divmodhi4>
 4a0:	cb 01       	movw	r24, r22
 4a2:	9a 83       	std	Y+2, r25	; 0x02
 4a4:	89 83       	std	Y+1, r24	; 0x01

000004a6 <.LBE17>:
	for (int i = 3; i >= 0; i--)
 4a6:	8d 81       	ldd	r24, Y+5	; 0x05
 4a8:	9e 81       	ldd	r25, Y+6	; 0x06
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	9e 83       	std	Y+6, r25	; 0x06
 4ae:	8d 83       	std	Y+5, r24	; 0x05

000004b0 <.L10>:
 4b0:	8d 81       	ldd	r24, Y+5	; 0x05
 4b2:	9e 81       	ldd	r25, Y+6	; 0x06
 4b4:	99 23       	and	r25, r25
 4b6:	0c f0       	brlt	.+2      	; 0x4ba <.LBE16>

000004b8 <L0^A>:
 4b8:	18 cf       	rjmp	.-464    	; 0x2ea <.L21>

000004ba <.LBE16>:
	{
		display(segmentcodes[getal%16], i);
		getal /= 16;
		_delay_ms(1);   // 1 kHz
	} */
}
 4ba:	00 00       	nop
 4bc:	00 00       	nop
 4be:	ac 96       	adiw	r28, 0x2c	; 44
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <__vector_29>:

static volatile int adc_value;

ISR(ADC_vect)
{
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	0b b6       	in	r0, 0x3b	; 59
 4dc:	0f 92       	push	r0
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62

000004ee <.Loc.81>:
	adc_value = ADC;
 4ee:	88 e7       	ldi	r24, 0x78	; 120
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	80 81       	ld	r24, Z
 4f6:	91 81       	ldd	r25, Z+1	; 0x01

000004f8 <.Loc.82>:
 4f8:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <adc_value+0x1>
 4fc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <adc_value>

00000500 <.Loc.83>:
}
 500:	00 00       	nop
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0b be       	out	0x3b, r0	; 59
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <init_adc>:

void init_adc(void)
{
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62

00000524 <.Loc.85>:
	ADMUX = (0<<REFS1) | (1<<REFS0);
 524:	8c e7       	ldi	r24, 0x7C	; 124
 526:	90 e0       	ldi	r25, 0x00	; 0

00000528 <.Loc.86>:
 528:	20 e4       	ldi	r18, 0x40	; 64
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18

0000052e <.Loc.87>:
	ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0); // A7 gebruiken
 52e:	8c e7       	ldi	r24, 0x7C	; 124
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	fc 01       	movw	r30, r24
 534:	20 81       	ld	r18, Z
 536:	8c e7       	ldi	r24, 0x7C	; 124
 538:	90 e0       	ldi	r25, 0x00	; 0

0000053a <.Loc.88>:
 53a:	27 60       	ori	r18, 0x07	; 7
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18

00000540 <.Loc.89>:

	ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 540:	8a e7       	ldi	r24, 0x7A	; 122
 542:	90 e0       	ldi	r25, 0x00	; 0

00000544 <.Loc.90>:
 544:	27 e0       	ldi	r18, 0x07	; 7
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18

0000054a <.Loc.91>:
	ADCSRA |= (1<<ADEN);
 54a:	8a e7       	ldi	r24, 0x7A	; 122
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	fc 01       	movw	r30, r24
 550:	20 81       	ld	r18, Z
 552:	8a e7       	ldi	r24, 0x7A	; 122
 554:	90 e0       	ldi	r25, 0x00	; 0

00000556 <.Loc.92>:
 556:	20 68       	ori	r18, 0x80	; 128
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18

0000055c <.Loc.93>:
	ADCSRA |= (1<<ADIE);
 55c:	8a e7       	ldi	r24, 0x7A	; 122
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	fc 01       	movw	r30, r24
 562:	20 81       	ld	r18, Z
 564:	8a e7       	ldi	r24, 0x7A	; 122
 566:	90 e0       	ldi	r25, 0x00	; 0

00000568 <.Loc.94>:
 568:	28 60       	ori	r18, 0x08	; 8
 56a:	fc 01       	movw	r30, r24
 56c:	20 83       	st	Z, r18

0000056e <.Loc.95>:
}
 56e:	00 00       	nop
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <start_adc>:

void start_adc(void)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62

0000057e <.Loc.97>:
	ADCSRA |= (1<<ADSC);
 57e:	8a e7       	ldi	r24, 0x7A	; 122
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	fc 01       	movw	r30, r24
 584:	20 81       	ld	r18, Z
 586:	8a e7       	ldi	r24, 0x7A	; 122
 588:	90 e0       	ldi	r25, 0x00	; 0

0000058a <.Loc.98>:
 58a:	20 64       	ori	r18, 0x40	; 64
 58c:	fc 01       	movw	r30, r24
 58e:	20 83       	st	Z, r18

00000590 <.Loc.99>:
}
 590:	00 00       	nop
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <adc_done>:

int adc_done(void)
{
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62

000005a0 <.Loc.101>:
	return (ADCSRA & (1<<ADSC)) == 0;
 5a0:	8a e7       	ldi	r24, 0x7A	; 122
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	fc 01       	movw	r30, r24
 5a6:	80 81       	ld	r24, Z

000005a8 <.Loc.102>:
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	80 74       	andi	r24, 0x40	; 64
 5ae:	99 27       	eor	r25, r25

000005b0 <.Loc.103>:
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	00 97       	sbiw	r24, 0x00	; 0
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <.L30>
 5b6:	20 e0       	ldi	r18, 0x00	; 0

000005b8 <.L30>:
 5b8:	82 2f       	mov	r24, r18
 5ba:	90 e0       	ldi	r25, 0x00	; 0

000005bc <.Loc.104>:
}
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <__vector_35>:

static volatile int show_value = 0;

ISR(TIMER3_OVF_vect)
{
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	0b b6       	in	r0, 0x3b	; 59
 5ce:	0f 92       	push	r0
 5d0:	2f 93       	push	r18
 5d2:	3f 93       	push	r19
 5d4:	4f 93       	push	r20
 5d6:	5f 93       	push	r21
 5d8:	6f 93       	push	r22
 5da:	7f 93       	push	r23
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
 5e0:	af 93       	push	r26
 5e2:	bf 93       	push	r27
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62

000005f0 <.Loc.106>:
	TCNT3 = INITIAL_TIMER_VALUE;
 5f0:	84 e9       	ldi	r24, 0x94	; 148
 5f2:	90 e0       	ldi	r25, 0x00	; 0

000005f4 <.Loc.107>:
 5f4:	2c ed       	ldi	r18, 0xDC	; 220
 5f6:	3b e0       	ldi	r19, 0x0B	; 11
 5f8:	fc 01       	movw	r30, r24
 5fa:	31 83       	std	Z+1, r19	; 0x01
 5fc:	20 83       	st	Z, r18

000005fe <.Loc.108>:
	start_adc();
 5fe:	0e 94 bb 02 	call	0x576	; 0x576 <start_adc>

00000602 <.Loc.109>:

	// Set to allow display update
	show_value ^= 1;
 602:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <show_value>
 606:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <show_value+0x1>
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	8f 27       	eor	r24, r31
 60e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <show_value+0x1>
 612:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <show_value>

00000616 <.Loc.110>:
}
 616:	00 00       	nop
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0b be       	out	0x3b, r0	; 59
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <init_timer3>:

void init_timer3(void)
{
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62

0000064a <.Loc.112>:
	// 16000000/(2^16) = 224, gebruik prescaler van 256
	// 16000000/256 = 62500. Overflow treedt op bij 65536
	// Om timing precies te krijgen, moet TCNT3 starten op 65536-62500 = 3036,
	// zodat te teller precies 62500 keer wordt verhoogd voordat de overflow
	// optreedt. Let op dat dit telkens moet gebeuren!
	TCNT3 = INITIAL_TIMER_VALUE;
 64a:	84 e9       	ldi	r24, 0x94	; 148
 64c:	90 e0       	ldi	r25, 0x00	; 0

0000064e <.Loc.113>:
 64e:	2c ed       	ldi	r18, 0xDC	; 220
 650:	3b e0       	ldi	r19, 0x0B	; 11
 652:	fc 01       	movw	r30, r24
 654:	31 83       	std	Z+1, r19	; 0x01
 656:	20 83       	st	Z, r18

00000658 <.Loc.114>:

	// Enable overflow interrupt
	TIMSK3 = (1<<TOIE3);
 658:	81 e7       	ldi	r24, 0x71	; 113
 65a:	90 e0       	ldi	r25, 0x00	; 0

0000065c <.Loc.115>:
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18

00000662 <.Loc.116>:
}
 662:	00 00       	nop
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <start_timer3>:

void start_timer3(void)
{
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62

00000672 <.Loc.118>:
	// prescaler 256: CS = 0b100
	TCCR3B = (1<<CS32) | (0<<CS31) | (0<<CS30);
 672:	81 e9       	ldi	r24, 0x91	; 145
 674:	90 e0       	ldi	r25, 0x00	; 0

00000676 <.Loc.119>:
 676:	24 e0       	ldi	r18, 0x04	; 4
 678:	fc 01       	movw	r30, r24
 67a:	20 83       	st	Z, r18

0000067c <.Loc.120>:
}
 67c:	00 00       	nop
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <init>:

void init(void)
{
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62

0000068c <.Loc.122>:
	init_display();
 68c:	0e 94 95 00 	call	0x12a	; 0x12a <init_display>

00000690 <.Loc.123>:
	init_adc();
 690:	0e 94 8e 02 	call	0x51c	; 0x51c <init_adc>

00000694 <.Loc.124>:
	init_timer3();
 694:	0e 94 21 03 	call	0x642	; 0x642 <init_timer3>

00000698 <.Loc.125>:
	start_timer3();
 698:	0e 94 35 03 	call	0x66a	; 0x66a <start_timer3>

0000069c <.Loc.126>:
	sei();
 69c:	78 94       	sei

0000069e <.Loc.127>:
}
 69e:	00 00       	nop
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <main>:

int main(void)
{
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62

000006ae <.Loc.129>:
	init();
 6ae:	0e 94 42 03 	call	0x684	; 0x684 <init>

000006b2 <.L38>:
		/*if (adc_done())
		{
		    start_adc();
			//adc_value = ADC;
		}*/
		if (show_value)
 6b2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <show_value>
 6b6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <show_value+0x1>

000006ba <.Loc.131>:
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	d1 f3       	breq	.-12     	; 0x6b2 <.L38>

000006be <.Loc.132>:
		{
			display_getal(adc_value);
 6be:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <adc_value>
 6c2:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <adc_value+0x1>
 6c6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_getal>

000006ca <.Loc.133>:
		if (show_value)
 6ca:	f3 cf       	rjmp	.-26     	; 0x6b2 <.L38>

000006cc <__udivmodhi4>:
 6cc:	aa 1b       	sub	r26, r26

000006ce <.Loc.1>:
 6ce:	bb 1b       	sub	r27, r27

000006d0 <.Loc.2>:
 6d0:	51 e1       	ldi	r21, 0x11	; 17

000006d2 <.Loc.3>:
 6d2:	07 c0       	rjmp	.+14     	; 0x6e2 <__udivmodhi4_ep>

000006d4 <__udivmodhi4_loop>:
 6d4:	aa 1f       	adc	r26, r26

000006d6 <.Loc.5>:
 6d6:	bb 1f       	adc	r27, r27

000006d8 <.Loc.6>:
 6d8:	a6 17       	cp	r26, r22

000006da <.Loc.7>:
 6da:	b7 07       	cpc	r27, r23

000006dc <.Loc.8>:
 6dc:	10 f0       	brcs	.+4      	; 0x6e2 <__udivmodhi4_ep>

000006de <.Loc.9>:
 6de:	a6 1b       	sub	r26, r22

000006e0 <.Loc.10>:
 6e0:	b7 0b       	sbc	r27, r23

000006e2 <__udivmodhi4_ep>:
 6e2:	88 1f       	adc	r24, r24

000006e4 <.Loc.12>:
 6e4:	99 1f       	adc	r25, r25

000006e6 <.Loc.13>:
 6e6:	5a 95       	dec	r21

000006e8 <.Loc.14>:
 6e8:	a9 f7       	brne	.-22     	; 0x6d4 <__udivmodhi4_loop>

000006ea <.Loc.15>:
 6ea:	80 95       	com	r24

000006ec <.Loc.16>:
 6ec:	90 95       	com	r25

000006ee <.Loc.17>:
 6ee:	bc 01       	movw	r22, r24

000006f0 <.Loc.18>:
 6f0:	cd 01       	movw	r24, r26

000006f2 <.Loc.19>:
 6f2:	08 95       	ret

000006f4 <__divmodhi4>:
 6f4:	97 fb       	bst	r25, 7

000006f6 <.Loc.1>:
 6f6:	07 2e       	mov	r0, r23

000006f8 <.Loc.2>:
 6f8:	16 f4       	brtc	.+4      	; 0x6fe <.L^B1>

000006fa <.Loc.3>:
 6fa:	00 94       	com	r0

000006fc <.Loc.4>:
 6fc:	07 d0       	rcall	.+14     	; 0x70c <__divmodhi4_neg1>

000006fe <.L^B1>:
 6fe:	77 fd       	sbrc	r23, 7

00000700 <.Loc.6>:
 700:	09 d0       	rcall	.+18     	; 0x714 <__divmodhi4_neg2>

00000702 <.Loc.7>:
 702:	0e 94 66 03 	call	0x6cc	; 0x6cc <__udivmodhi4>

00000706 <.Loc.8>:
 706:	07 fc       	sbrc	r0, 7

00000708 <.Loc.9>:
 708:	05 d0       	rcall	.+10     	; 0x714 <__divmodhi4_neg2>

0000070a <.Loc.10>:
 70a:	3e f4       	brtc	.+14     	; 0x71a <__divmodhi4_exit>

0000070c <__divmodhi4_neg1>:
 70c:	90 95       	com	r25

0000070e <.Loc.12>:
 70e:	81 95       	neg	r24

00000710 <.Loc.13>:
 710:	9f 4f       	sbci	r25, 0xFF	; 255

00000712 <.Loc.14>:
 712:	08 95       	ret

00000714 <__divmodhi4_neg2>:
 714:	70 95       	com	r23

00000716 <.Loc.16>:
 716:	61 95       	neg	r22

00000718 <.Loc.17>:
 718:	7f 4f       	sbci	r23, 0xFF	; 255

0000071a <__divmodhi4_exit>:
 71a:	08 95       	ret

0000071c <__umulhisi3>:
 71c:	a2 9f       	mul	r26, r18

0000071e <.Loc.1>:
 71e:	b0 01       	movw	r22, r0

00000720 <.Loc.2>:
 720:	b3 9f       	mul	r27, r19

00000722 <.Loc.3>:
 722:	c0 01       	movw	r24, r0

00000724 <.Loc.4>:
 724:	a3 9f       	mul	r26, r19

00000726 <.Loc.5>:
 726:	70 0d       	add	r23, r0

00000728 <.Loc.6>:
 728:	81 1d       	adc	r24, r1

0000072a <.Loc.7>:
 72a:	11 24       	eor	r1, r1

0000072c <.Loc.8>:
 72c:	91 1d       	adc	r25, r1

0000072e <.Loc.9>:
 72e:	b2 9f       	mul	r27, r18

00000730 <.Loc.10>:
 730:	70 0d       	add	r23, r0

00000732 <.Loc.11>:
 732:	81 1d       	adc	r24, r1

00000734 <.Loc.12>:
 734:	11 24       	eor	r1, r1

00000736 <.Loc.13>:
 736:	91 1d       	adc	r25, r1

00000738 <.Loc.14>:
 738:	08 95       	ret

0000073a <__cmpsf2>:
 73a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_cmp>
 73e:	08 f4       	brcc	.+2      	; 0x742 <.L1^B1>
 740:	81 e0       	ldi	r24, 0x01	; 1

00000742 <.L1^B1>:
 742:	08 95       	ret

00000744 <__fixunssfsi>:
 744:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_splitA>
 748:	88 f0       	brcs	.+34     	; 0x76c <.L_err>
 74a:	9f 57       	subi	r25, 0x7F	; 127
 74c:	98 f0       	brcs	.+38     	; 0x774 <.L_zr>
 74e:	b9 2f       	mov	r27, r25
 750:	99 27       	eor	r25, r25
 752:	b7 51       	subi	r27, 0x17	; 23
 754:	b0 f0       	brcs	.+44     	; 0x782 <.L4^B1>
 756:	e1 f0       	breq	.+56     	; 0x790 <.L_sign>

00000758 <.L1^B1>:
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	1a f0       	brmi	.+6      	; 0x768 <.L2^B1>
 762:	ba 95       	dec	r27
 764:	c9 f7       	brne	.-14     	; 0x758 <.L1^B1>
 766:	14 c0       	rjmp	.+40     	; 0x790 <.L_sign>

00000768 <.L2^B1>:
 768:	b1 30       	cpi	r27, 0x01	; 1
 76a:	91 f0       	breq	.+36     	; 0x790 <.L_sign>

0000076c <.L_err>:
 76c:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_zero>
 770:	b1 e0       	ldi	r27, 0x01	; 1
 772:	08 95       	ret

00000774 <.L_zr>:
 774:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>

00000778 <.L3^B1>:
 778:	67 2f       	mov	r22, r23
 77a:	78 2f       	mov	r23, r24
 77c:	88 27       	eor	r24, r24
 77e:	b8 5f       	subi	r27, 0xF8	; 248
 780:	39 f0       	breq	.+14     	; 0x790 <.L_sign>

00000782 <.L4^B1>:
 782:	b9 3f       	cpi	r27, 0xF9	; 249
 784:	cc f3       	brlt	.-14     	; 0x778 <.L3^B1>

00000786 <.L5^B1>:
 786:	86 95       	lsr	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b3 95       	inc	r27
 78e:	d9 f7       	brne	.-10     	; 0x786 <.L5^B1>

00000790 <.L_sign>:
 790:	3e f4       	brtc	.+14     	; 0x7a0 <.L6^B1>
 792:	90 95       	com	r25
 794:	80 95       	com	r24
 796:	70 95       	com	r23
 798:	61 95       	neg	r22
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	8f 4f       	sbci	r24, 0xFF	; 255
 79e:	9f 4f       	sbci	r25, 0xFF	; 255

000007a0 <.L6^B1>:
 7a0:	08 95       	ret

000007a2 <__fp_cmp>:
 7a2:	99 0f       	add	r25, r25
 7a4:	00 08       	sbc	r0, r0
 7a6:	55 0f       	add	r21, r21
 7a8:	aa 0b       	sbc	r26, r26
 7aa:	e0 e8       	ldi	r30, 0x80	; 128
 7ac:	fe ef       	ldi	r31, 0xFE	; 254
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	e8 07       	cpc	r30, r24
 7b4:	f9 07       	cpc	r31, r25
 7b6:	c0 f0       	brcs	.+48     	; 0x7e8 <.L9^B1>
 7b8:	12 16       	cp	r1, r18
 7ba:	13 06       	cpc	r1, r19
 7bc:	e4 07       	cpc	r30, r20
 7be:	f5 07       	cpc	r31, r21
 7c0:	98 f0       	brcs	.+38     	; 0x7e8 <.L9^B1>
 7c2:	62 1b       	sub	r22, r18
 7c4:	73 0b       	sbc	r23, r19
 7c6:	84 0b       	sbc	r24, r20
 7c8:	95 0b       	sbc	r25, r21
 7ca:	39 f4       	brne	.+14     	; 0x7da <.L1^B1>
 7cc:	0a 26       	eor	r0, r26
 7ce:	61 f0       	breq	.+24     	; 0x7e8 <.L9^B1>
 7d0:	23 2b       	or	r18, r19
 7d2:	24 2b       	or	r18, r20
 7d4:	25 2b       	or	r18, r21
 7d6:	21 f4       	brne	.+8      	; 0x7e0 <.L2^B1>
 7d8:	08 95       	ret

000007da <.L1^B1>:
 7da:	0a 26       	eor	r0, r26
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <.L2^B1>
 7de:	a1 40       	sbci	r26, 0x01	; 1

000007e0 <.L2^B1>:
 7e0:	a6 95       	lsr	r26
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	81 1d       	adc	r24, r1
 7e6:	81 1d       	adc	r24, r1

000007e8 <.L9^B1>:
 7e8:	08 95       	ret

000007ea <__fp_split3>:
 7ea:	57 fd       	sbrc	r21, 7
 7ec:	90 58       	subi	r25, 0x80	; 128
 7ee:	44 0f       	add	r20, r20
 7f0:	55 1f       	adc	r21, r21
 7f2:	59 f0       	breq	.+22     	; 0x80a <.L4^B1>
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	71 f0       	breq	.+28     	; 0x814 <.L5^B1>

000007f8 <.L1^B1>:
 7f8:	47 95       	ror	r20

000007fa <__fp_splitA>:
 7fa:	88 0f       	add	r24, r24
 7fc:	97 fb       	bst	r25, 7
 7fe:	99 1f       	adc	r25, r25
 800:	61 f0       	breq	.+24     	; 0x81a <.L6^B1>
 802:	9f 3f       	cpi	r25, 0xFF	; 255
 804:	79 f0       	breq	.+30     	; 0x824 <.L7^B1>

00000806 <.L3^B1>:
 806:	87 95       	ror	r24
 808:	08 95       	ret

0000080a <.L4^B1>:
 80a:	12 16       	cp	r1, r18
 80c:	13 06       	cpc	r1, r19
 80e:	14 06       	cpc	r1, r20
 810:	55 1f       	adc	r21, r21
 812:	f2 cf       	rjmp	.-28     	; 0x7f8 <.L1^B1>

00000814 <.L5^B1>:
 814:	46 95       	lsr	r20
 816:	f1 df       	rcall	.-30     	; 0x7fa <__fp_splitA>
 818:	08 c0       	rjmp	.+16     	; 0x82a <.L8^B1>

0000081a <.L6^B1>:
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	18 06       	cpc	r1, r24
 820:	99 1f       	adc	r25, r25
 822:	f1 cf       	rjmp	.-30     	; 0x806 <.L3^B1>

00000824 <.L7^B1>:
 824:	86 95       	lsr	r24
 826:	71 05       	cpc	r23, r1
 828:	61 05       	cpc	r22, r1

0000082a <.L8^B1>:
 82a:	08 94       	sec
 82c:	08 95       	ret

0000082e <__fp_zero>:
 82e:	e8 94       	clt

00000830 <__fp_szero>:
 830:	bb 27       	eor	r27, r27
 832:	66 27       	eor	r22, r22
 834:	77 27       	eor	r23, r23
 836:	cb 01       	movw	r24, r22
 838:	97 f9       	bld	r25, 7
 83a:	08 95       	ret

0000083c <__gesf2>:
 83c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_cmp>
 840:	08 f4       	brcc	.+2      	; 0x844 <.L1^B1>
 842:	8f ef       	ldi	r24, 0xFF	; 255

00000844 <.L1^B1>:
 844:	08 95       	ret

00000846 <__mulsf3>:
 846:	0e 94 36 04 	call	0x86c	; 0x86c <__mulsf3x>
 84a:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_round>

0000084e <.L^B1>:
 84e:	0e 94 99 04 	call	0x932	; 0x932 <__fp_pscA>
 852:	38 f0       	brcs	.+14     	; 0x862 <.L1^B1>
 854:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_pscB>
 858:	20 f0       	brcs	.+8      	; 0x862 <.L1^B1>
 85a:	95 23       	and	r25, r21
 85c:	11 f0       	breq	.+4      	; 0x862 <.L1^B1>
 85e:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>

00000862 <.L1^B1>:
 862:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_nan>

00000866 <.L2^B1>:
 866:	11 24       	eor	r1, r1
 868:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>

0000086c <__mulsf3x>:
 86c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 870:	70 f3       	brcs	.-36     	; 0x84e <.L^B1>

00000872 <__mulsf3_pse>:
 872:	95 9f       	mul	r25, r21
 874:	c1 f3       	breq	.-16     	; 0x866 <.L2^B1>
 876:	95 0f       	add	r25, r21
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	55 1f       	adc	r21, r21
 87c:	62 9f       	mul	r22, r18
 87e:	f0 01       	movw	r30, r0
 880:	72 9f       	mul	r23, r18
 882:	bb 27       	eor	r27, r27
 884:	f0 0d       	add	r31, r0
 886:	b1 1d       	adc	r27, r1
 888:	63 9f       	mul	r22, r19
 88a:	aa 27       	eor	r26, r26
 88c:	f0 0d       	add	r31, r0
 88e:	b1 1d       	adc	r27, r1
 890:	aa 1f       	adc	r26, r26
 892:	64 9f       	mul	r22, r20
 894:	66 27       	eor	r22, r22
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	66 1f       	adc	r22, r22
 89c:	82 9f       	mul	r24, r18
 89e:	22 27       	eor	r18, r18
 8a0:	b0 0d       	add	r27, r0
 8a2:	a1 1d       	adc	r26, r1
 8a4:	62 1f       	adc	r22, r18
 8a6:	73 9f       	mul	r23, r19
 8a8:	b0 0d       	add	r27, r0
 8aa:	a1 1d       	adc	r26, r1
 8ac:	62 1f       	adc	r22, r18
 8ae:	83 9f       	mul	r24, r19
 8b0:	a0 0d       	add	r26, r0
 8b2:	61 1d       	adc	r22, r1
 8b4:	22 1f       	adc	r18, r18
 8b6:	74 9f       	mul	r23, r20
 8b8:	33 27       	eor	r19, r19
 8ba:	a0 0d       	add	r26, r0
 8bc:	61 1d       	adc	r22, r1
 8be:	23 1f       	adc	r18, r19
 8c0:	84 9f       	mul	r24, r20
 8c2:	60 0d       	add	r22, r0
 8c4:	21 1d       	adc	r18, r1
 8c6:	82 2f       	mov	r24, r18
 8c8:	76 2f       	mov	r23, r22
 8ca:	6a 2f       	mov	r22, r26
 8cc:	11 24       	eor	r1, r1
 8ce:	9f 57       	subi	r25, 0x7F	; 127
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	9a f0       	brmi	.+38     	; 0x8fa <.L13^B1>
 8d4:	f1 f0       	breq	.+60     	; 0x912 <.L15^B1>

000008d6 <.L10^B1>:
 8d6:	88 23       	and	r24, r24
 8d8:	4a f0       	brmi	.+18     	; 0x8ec <.L11^B1>
 8da:	ee 0f       	add	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	bb 1f       	adc	r27, r27
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	a9 f7       	brne	.-22     	; 0x8d6 <.L10^B1>

000008ec <.L11^B1>:
 8ec:	9e 3f       	cpi	r25, 0xFE	; 254
 8ee:	51 05       	cpc	r21, r1
 8f0:	80 f0       	brcs	.+32     	; 0x912 <.L15^B1>
 8f2:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_inf>

000008f6 <.L12^B1>:
 8f6:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>

000008fa <.L13^B1>:
 8fa:	5f 3f       	cpi	r21, 0xFF	; 255
 8fc:	e4 f3       	brlt	.-8      	; 0x8f6 <.L12^B1>
 8fe:	98 3e       	cpi	r25, 0xE8	; 232
 900:	d4 f3       	brlt	.-12     	; 0x8f6 <.L12^B1>

00000902 <.L14^B1>:
 902:	86 95       	lsr	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	b7 95       	ror	r27
 90a:	f7 95       	ror	r31
 90c:	e7 95       	ror	r30
 90e:	9f 5f       	subi	r25, 0xFF	; 255
 910:	c1 f7       	brne	.-16     	; 0x902 <.L14^B1>

00000912 <.L15^B1>:
 912:	fe 2b       	or	r31, r30
 914:	88 0f       	add	r24, r24
 916:	91 1d       	adc	r25, r1
 918:	96 95       	lsr	r25
 91a:	87 95       	ror	r24
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <__fp_inf>:
 920:	97 f9       	bld	r25, 7
 922:	9f 67       	ori	r25, 0x7F	; 127
 924:	80 e8       	ldi	r24, 0x80	; 128
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	60 e0       	ldi	r22, 0x00	; 0
 92a:	08 95       	ret

0000092c <__fp_nan>:
 92c:	9f ef       	ldi	r25, 0xFF	; 255
 92e:	80 ec       	ldi	r24, 0xC0	; 192
 930:	08 95       	ret

00000932 <__fp_pscA>:
 932:	00 24       	eor	r0, r0
 934:	0a 94       	dec	r0
 936:	16 16       	cp	r1, r22
 938:	17 06       	cpc	r1, r23
 93a:	18 06       	cpc	r1, r24
 93c:	09 06       	cpc	r0, r25
 93e:	08 95       	ret

00000940 <__fp_pscB>:
 940:	00 24       	eor	r0, r0
 942:	0a 94       	dec	r0
 944:	12 16       	cp	r1, r18
 946:	13 06       	cpc	r1, r19
 948:	14 06       	cpc	r1, r20
 94a:	05 06       	cpc	r0, r21
 94c:	08 95       	ret

0000094e <__fp_round>:
 94e:	09 2e       	mov	r0, r25
 950:	03 94       	inc	r0
 952:	00 0c       	add	r0, r0
 954:	11 f4       	brne	.+4      	; 0x95a <.L1^B1>
 956:	88 23       	and	r24, r24
 958:	52 f0       	brmi	.+20     	; 0x96e <.L3^B1>

0000095a <.L1^B1>:
 95a:	bb 0f       	add	r27, r27
 95c:	40 f4       	brcc	.+16     	; 0x96e <.L3^B1>
 95e:	bf 2b       	or	r27, r31
 960:	11 f4       	brne	.+4      	; 0x966 <.L2^B1>
 962:	60 ff       	sbrs	r22, 0
 964:	04 c0       	rjmp	.+8      	; 0x96e <.L3^B1>

00000966 <.L2^B1>:
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255

0000096e <.L3^B1>:
 96e:	08 95       	ret

00000970 <_exit>:
 970:	f8 94       	cli

00000972 <__stop_program>:
 972:	ff cf       	rjmp	.-2      	; 0x972 <__stop_program>
